// Copyright 2024 CloudWeGo Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by thriftgo (0.3.10). DO NOT EDIT.

package option_gen

import (
	"reflect"

	"github.com/cloudwego/thriftgo/thrift_reflection"
)

// IDL Name: test
// IDL Path: ../option_idl/test.thrift

var file_test_thrift_go_types = []interface{}{
	(*IDCard)(nil),     // Struct 0: option_gen.IDCard
	(*Person)(nil),     // Struct 1: option_gen.Person
	(*PersonB)(nil),    // Struct 2: option_gen.PersonB
	(*PersonC)(nil),    // Struct 3: option_gen.PersonC
	(*TinyStruct)(nil), // Struct 4: option_gen.TinyStruct
	(*MyEnum)(nil),     // Enum 0: option_gen.MyEnum
}
var file_test_thrift *thrift_reflection.FileDescriptor
var file_idl_test_rawDesc = []byte{
	0x1f, 0x8b, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xff, 0xcc, 0x58, 0xed, 0x6f, 0xdb, 0x36,
	0x13, 0x3f, 0xcb, 0x89, 0x93, 0xda, 0x9, 0xd2, 0x7, 0x7d, 0xf6, 0xd2, 0xbd, 0x0, 0x9a, 0xb0,
	0xa1, 0x1f, 0x26, 0x28, 0x90, 0xec, 0x8, 0xa9, 0xf6, 0x65, 0x4b, 0x3b, 0xc, 0x5, 0x96, 0x61,
	0x58, 0x87, 0xa1, 0x40, 0x10, 0x4, 0x94, 0x45, 0xc7, 0x44, 0x25, 0xca, 0x93, 0x69, 0x63, 0x46,
	0xe0, 0xff, 0x7d, 0x20, 0x45, 0xc9, 0xa2, 0x45, 0x27, 0x52, 0x5b, 0x14, 0xcb, 0x17, 0xc5, 0xe4,
	0xef, 0xee, 0x7e, 0xf7, 0xc2, 0x3b, 0x89, 0x3, 0xe8, 0x0, 0xc0, 0x53, 0xc7, 0x39, 0x4d, 0x67,
	0x8c, 0xa4, 0xf4, 0x86, 0x44, 0xf1, 0x29, 0xc3, 0x73, 0xe6, 0xb0, 0x69, 0x46, 0x26, 0xec, 0x18,
	0x8c, 0xc1, 0x0, 0x0, 0xc, 0x0, 0xe8, 0x61, 0xca, 0x8, 0x5b, 0x1, 0x80, 0xa3, 0xe2, 0x11,
	0xa5, 0x29, 0x43, 0xfc, 0xe7, 0xfc, 0x34, 0xc7, 0xc8, 0x87, 0x54, 0x2, 0x0, 0xfd, 0x25, 0x8a,
	0x49, 0x24, 0x30, 0x0, 0xe0, 0xef, 0x96, 0xdf, 0xe0, 0x2a, 0xff, 0x96, 0x64, 0xba, 0x82, 0xc,
	0xa7, 0x6c, 0xdc, 0xa6, 0x5c, 0xad, 0xd4, 0x72, 0x8b, 0xe9, 0x9, 0xec, 0x1d, 0xf1, 0xbd, 0x87,
	0x3c, 0x1a, 0x8, 0x5f, 0x1e, 0x5d, 0xae, 0x5e, 0xe3, 0x6c, 0x49, 0xc6, 0xf8, 0x4, 0xba, 0x5c,
	0xce, 0x68, 0x26, 0x67, 0x5c, 0xba, 0x47, 0xd0, 0x6d, 0x86, 0xed, 0xcd, 0x59, 0x46, 0xe8, 0x2d,
	0x48, 0x66, 0x70, 0xc, 0xfb, 0x83, 0x13, 0x49, 0xff, 0xd3, 0x8a, 0x73, 0x9, 0x66, 0xd3, 0x34,
	0xba, 0x21, 0x74, 0x92, 0x16, 0xde, 0xbd, 0xbc, 0xeb, 0x9b, 0x95, 0x3f, 0x8a, 0x12, 0x1c, 0x98,
	0x97, 0x2, 0xf7, 0x8a, 0x4e, 0xd2, 0xdf, 0x50, 0x82, 0x55, 0xc0, 0x22, 0x9, 0x71, 0x16, 0x98,
	0x67, 0x67, 0x67, 0xe5, 0xfa, 0x7a, 0x0, 0x3d, 0x6e, 0xf6, 0x4, 0xe, 0x84, 0x79, 0x3, 0xe,
	0x1, 0x9a, 0x7a, 0xe9, 0xfd, 0x97, 0xbd, 0x1c, 0x8d, 0x46, 0xf7, 0x7b, 0x79, 0xc, 0x7b, 0x25,
	0x87, 0x27, 0x15, 0xe, 0xf3, 0xe5, 0x58, 0x21, 0xf0, 0x7c, 0x43, 0x20, 0x37, 0x2e, 0x6b, 0xa2,
	0x66, 0xbd, 0xb0, 0xec, 0xfb, 0x7e, 0x5f, 0x5a, 0xdd, 0x87, 0xdc, 0xec, 0x3e, 0x37, 0xbb, 0xdf,
	0x30, 0x56, 0xaf, 0x5e, 0xbe, 0x40, 0x59, 0xd4, 0xae, 0xe4, 0x7a, 0xb9, 0xf1, 0xd6, 0x9, 0x19,
	0xc0, 0x1e, 0x0, 0x1c, 0xfe, 0x81, 0xff, 0x5e, 0x90, 0xc, 0x47, 0x87, 0x82, 0x71, 0xe7, 0x18,
	0xe, 0x44, 0x68, 0x60, 0xc0, 0x3, 0x5, 0x4d, 0x2b, 0xa2, 0x8b, 0x6e, 0x71, 0x63, 0x6, 0x6,
	0x39, 0xd7, 0x5b, 0x37, 0x6a, 0xd6, 0x8b, 0x4c, 0x41, 0x11, 0xd0, 0x86, 0x3e, 0xfe, 0x8e, 0xb3,
	0x79, 0x4a, 0xdb, 0x5, 0x72, 0x8f, 0xe7, 0xf8, 0x3, 0x87, 0x91, 0x6b, 0xfa, 0x5c, 0x36, 0xbb,
	0x99, 0xe0, 0x74, 0x33, 0x21, 0x38, 0x56, 0xeb, 0xfc, 0x33, 0x36, 0xc5, 0xa2, 0xc0, 0xcc, 0x74,
	0x62, 0xb2, 0x29, 0x99, 0x9b, 0x39, 0xb4, 0x5d, 0xa, 0xc, 0x12, 0x35, 0x27, 0x9f, 0x17, 0x5a,
	0xdb, 0x2c, 0xf4, 0xeb, 0xde, 0x84, 0x68, 0x4e, 0x94, 0x43, 0xd3, 0x31, 0xd4, 0x53, 0xbb, 0x44,
	0xf1, 0x2, 0x93, 0xf3, 0xe0, 0x5c, 0xb3, 0xea, 0xfa, 0x81, 0xeb, 0x6b, 0xd6, 0x87, 0x5e, 0x30,
	0xf4, 0x34, 0xeb, 0xfe, 0x28, 0xf0, 0x47, 0xf5, 0xf5, 0x3c, 0x13, 0xc1, 0x33, 0xfc, 0xf, 0x4a,
	0x66, 0x31, 0xfe, 0x11, 0x27, 0x88, 0xc4, 0xce, 0x38, 0x4d, 0x9e, 0xd5, 0xb1, 0xe1, 0x8a, 0xe1,
	0xc0, 0x74, 0x35, 0x1b, 0x84, 0xa2, 0x6c, 0x15, 0x98, 0xae, 0xc6, 0x70, 0x94, 0x2e, 0xc2, 0x18,
	0x7, 0x43, 0xc7, 0x1d, 0xb9, 0x67, 0xcf, 0x35, 0xb2, 0x69, 0x1a, 0x7, 0x26, 0xcb, 0x16, 0x79,
	0x47, 0x58, 0x3, 0xc0, 0x17, 0x95, 0xb6, 0x22, 0x43, 0x95, 0xa0, 0x99, 0x92, 0xf6, 0xff, 0xdd,
	0x59, 0x53, 0xbc, 0x72, 0xad, 0xc0, 0x12, 0x4a, 0x5c, 0x8b, 0xcb, 0x7d, 0x59, 0x97, 0xc3, 0x74,
	0x91, 0x28, 0x82, 0xdd, 0x37, 0x6f, 0x7e, 0x5, 0x80, 0xef, 0xea, 0xd0, 0x39, 0xcb, 0x16, 0x63,
	0x76, 0xc3, 0x56, 0x33, 0x1c, 0xe1, 0x89, 0x22, 0xf4, 0xe4, 0x4e, 0xb4, 0x30, 0xb, 0x27, 0x33,
	0xb6, 0x12, 0xd5, 0x26, 0xec, 0x7d, 0xbf, 0x53, 0x49, 0x84, 0x27, 0x68, 0x11, 0xb3, 0x1b, 0x41,
	0x4e, 0x51, 0xf5, 0xf8, 0x6e, 0xe9, 0x6, 0xd6, 0xd2, 0x35, 0xf3, 0xc0, 0xb, 0x3d, 0x7, 0x8,
	0x21, 0x27, 0xc, 0xc3, 0x2, 0xb3, 0x3f, 0xc5, 0x71, 0xcc, 0x47, 0xf0, 0x53, 0xb5, 0x5e, 0xa4,
	0xf2, 0x6a, 0xc1, 0x5c, 0x68, 0xa, 0x26, 0x87, 0x5, 0x77, 0x22, 0x95, 0x5, 0x69, 0xf1, 0xc3,
	0x5a, 0xd7, 0xd1, 0xbc, 0xbe, 0xb, 0x9, 0x65, 0x57, 0xb6, 0x6d, 0x2b, 0xc6, 0xd8, 0x52, 0x37,
	0x8, 0xa5, 0x38, 0x7b, 0xad, 0x95, 0xe1, 0x7f, 0xd2, 0x2e, 0x4d, 0xa5, 0xd1, 0x2d, 0x84, 0xca,
	0x41, 0xc3, 0x88, 0xe7, 0x2c, 0x30, 0x2f, 0x76, 0x39, 0x26, 0x13, 0xd4, 0xd4, 0x3f, 0x71, 0xc8,
	0xa, 0x19, 0xd3, 0x12, 0xa1, 0x35, 0xd9, 0x14, 0x67, 0xd2, 0x2b, 0x9e, 0x80, 0xaf, 0xd4, 0x38,
	0x8f, 0x53, 0xca, 0x10, 0xa1, 0x38, 0x53, 0x42, 0xed, 0x69, 0x42, 0x9d, 0xa0, 0x59, 0x50, 0xab,
	0xc4, 0x3a, 0x2c, 0x26, 0x73, 0x16, 0x5c, 0x59, 0xfc, 0xe1, 0x5a, 0xb6, 0x78, 0x7a, 0xd6, 0xb5,
	0xc6, 0x41, 0x5c, 0xc0, 0x86, 0x12, 0x36, 0xd2, 0xc1, 0xf8, 0x86, 0x80, 0x5e, 0x21, 0x3b, 0xb4,
	0xc7, 0xd7, 0xf6, 0x55, 0x64, 0x63, 0x7b, 0x72, 0xbd, 0x1b, 0x2a, 0x13, 0x7c, 0x75, 0x25, 0x83,
	0x86, 0xdd, 0xb5, 0x5d, 0xfc, 0xeb, 0xad, 0xaf, 0xed, 0x72, 0x7d, 0xb8, 0x59, 0x1f, 0xad, 0x75,
	0xa, 0x13, 0x34, 0x2b, 0xaa, 0xe5, 0xad, 0x1b, 0x6c, 0xd4, 0x99, 0x6f, 0xbd, 0x60, 0xa3, 0x71,
	0x5d, 0x86, 0xf6, 0x6b, 0xed, 0x19, 0x21, 0xf4, 0x56, 0x39, 0x15, 0x65, 0xc5, 0x7f, 0x5b, 0x87,
	0xe7, 0x5d, 0x52, 0x77, 0x2c, 0x8f, 0x95, 0x6c, 0xb6, 0x9b, 0x72, 0x7, 0xf9, 0x94, 0xbb, 0x90,
	0x63, 0xae, 0x6c, 0xd3, 0xdd, 0xa6, 0xe5, 0xf0, 0xb8, 0x69, 0x39, 0xd8, 0xf7, 0x94, 0xc0, 0x3d,
	0x69, 0x37, 0xed, 0x8f, 0x9c, 0x6b, 0xfb, 0xfd, 0x93, 0xfd, 0xe0, 0x7c, 0x83, 0x1d, 0xf3, 0xcd,
	0xae, 0xcc, 0x34, 0xd, 0x8f, 0x7c, 0xa8, 0xe9, 0x36, 0xc4, 0x54, 0x33, 0x35, 0x3b, 0xbb, 0xe7,
	0x9a, 0x6, 0x2c, 0x7, 0x9b, 0x6e, 0xa7, 0x9c, 0x6c, 0x3a, 0x23, 0xea, 0x6c, 0xd3, 0x89, 0x97,
	0xc3, 0xcd, 0x2e, 0x83, 0xf4, 0x70, 0x53, 0x77, 0x3e, 0x4e, 0x53, 0xb7, 0xdf, 0xab, 0xab, 0xdb,
	0xef, 0xd8, 0xd6, 0x1b, 0xb7, 0x72, 0xd3, 0x6e, 0xd8, 0xc0, 0xdf, 0xe9, 0xe0, 0xbf, 0xd8, 0x3e,
	0xf8, 0x5c, 0xc7, 0x37, 0xbb, 0xea, 0xd7, 0x29, 0xea, 0xb3, 0xfc, 0x44, 0x76, 0x7d, 0xfe, 0x16,
	0xb1, 0x33, 0x95, 0x4e, 0xc5, 0xcb, 0x42, 0xe6, 0x13, 0xad, 0x9b, 0xfc, 0x93, 0xff, 0x1, 0x35,
	0x9b, 0x6c, 0x3a, 0x3c, 0x7d, 0xe5, 0xab, 0x4c, 0x8c, 0x31, 0x0, 0xfc, 0xd0, 0x5c, 0xba, 0x92,
	0x62, 0x47, 0x98, 0x2f, 0x54, 0x1d, 0x16, 0x69, 0x5, 0x0, 0xf3, 0x81, 0x20, 0x9c, 0x17, 0x42,
	0x9d, 0xf3, 0x76, 0x91, 0xef, 0xff, 0x49, 0xe8, 0x2a, 0xb7, 0xde, 0xf2, 0x62, 0x20, 0x6c, 0x7e,
	0x31, 0xb0, 0xc7, 0x8f, 0xdc, 0x87, 0xfd, 0x3e, 0x33, 0xc2, 0xe6, 0x5f, 0xec, 0xf7, 0x98, 0x6f,
	0xf0, 0x81, 0x76, 0x2, 0xbd, 0xa3, 0xca, 0x7, 0x77, 0xc3, 0xfb, 0x96, 0xde, 0xe5, 0xea, 0x67,
	0xba, 0x48, 0xda, 0xc5, 0xb4, 0xf3, 0x53, 0x5f, 0xcc, 0x3a, 0x85, 0x48, 0x67, 0xeb, 0xe5, 0x5b,
	0xbc, 0x3d, 0xd7, 0xdf, 0x61, 0x7f, 0xd1, 0xdd, 0x2d, 0x70, 0xa, 0x7f, 0x71, 0xe8, 0xbd, 0xd7,
	0xb, 0x9e, 0xe7, 0x55, 0xaf, 0x17, 0xda, 0x94, 0x4f, 0xe7, 0x62, 0xc3, 0xb8, 0x53, 0xb, 0x5d,
	0xd5, 0x85, 0xff, 0x6f, 0xbb, 0x50, 0x25, 0xef, 0x6f, 0xdf, 0x4b, 0x70, 0xe2, 0x3b, 0x2f, 0x25,
	0x86, 0xc3, 0xe1, 0xf6, 0xa5, 0xc4, 0xa1, 0x4c, 0xd1, 0x23, 0xf9, 0xec, 0x8b, 0x27, 0xfc, 0x1b,
	0x0, 0x0, 0xff, 0xff, 0xd, 0xf6, 0x36, 0xfe, 0xee, 0x13, 0x0, 0x0,
}

func init() {
	if file_test_thrift != nil {
		return
	}
	type x struct{}
	builder := &thrift_reflection.FileDescriptorBuilder{
		Bytes:         file_idl_test_rawDesc,
		GoTypes:       file_test_thrift_go_types,
		GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
	}
	file_test_thrift = thrift_reflection.BuildFileDescriptor(builder)
}

func GetFileDescriptorForTest() *thrift_reflection.FileDescriptor {
	return file_test_thrift
}
func (p *IDCard) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_test_thrift.GetStructDescriptor("IDCard")
}

func (p *IDCard) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_test_thrift.Filepath
	ret.Name = "IDCard"
	return ret
}
func (p *Person) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_test_thrift.GetStructDescriptor("Person")
}

func (p *Person) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_test_thrift.Filepath
	ret.Name = "Person"
	return ret
}
func (p *PersonB) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_test_thrift.GetStructDescriptor("PersonB")
}

func (p *PersonB) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_test_thrift.Filepath
	ret.Name = "PersonB"
	return ret
}
func (p *PersonC) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_test_thrift.GetStructDescriptor("PersonC")
}

func (p *PersonC) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_test_thrift.Filepath
	ret.Name = "PersonC"
	return ret
}
func (p *TinyStruct) GetDescriptor() *thrift_reflection.StructDescriptor {
	return file_test_thrift.GetStructDescriptor("TinyStruct")
}

func (p *TinyStruct) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_test_thrift.Filepath
	ret.Name = "TinyStruct"
	return ret
}
func (p MyEnum) GetDescriptor() *thrift_reflection.EnumDescriptor {
	return file_test_thrift.GetEnumDescriptor("MyEnum")
}

func (p *MyEnum) GetTypeDescriptor() *thrift_reflection.TypeDescriptor {
	ret := thrift_reflection.NewTypeDescriptor()
	ret.Filepath = file_test_thrift.Filepath
	ret.Name = "MyEnum"
	return ret
}
